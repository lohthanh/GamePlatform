@page "/login"
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage

<EditForm Model="loginUser" OnValidSubmit="Authenticate">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" @bind-Value="loginUser.LoginEmail" type="email" class="form-control mb-3" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" @bind-Value="loginUser.LoginPassword" type="password" class="form-control" />
    </div>

    <button type="submit" class="btn btn-primary my-3">Login</button>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
</EditForm>

@code {
    private LoginUser loginUser = new LoginUser();
    private string errorMessage;

    private async Task Authenticate()
    {
        HttpResponseMessage result = null;
        
        try
        {
            result = await Http.PostAsJsonAsync("http://localhost:5088/api/users/login", loginUser);
            result.EnsureSuccessStatusCode();
            
            var responseContent = await result.Content.ReadAsStringAsync();
            var responseObject = System.Text.Json.JsonSerializer.Deserialize<AuthenticationResponse>(responseContent);
            
            if (responseObject != null)
            {
                await LocalStorage.SetItemAsync("authToken", responseObject.token);
                Http.DefaultRequestHeaders.Add("Authorization", $"Bearer {responseObject.token}");
                @* Http.DefaultRequestHeaders.Add = new AuthenticationHeaderValue("Bearer", responseObject.token); *@
                
                // Navigate to home page or wherever you want after successful login
                Navigation.NavigateTo("/");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
            errorMessage = result is null || !result.IsSuccessStatusCode ? "Invalid username or password." : "An unknown error occurred.";
        }
    }

    public class AuthenticationResponse
    {
        public string token { get; set; }
    }
}